---
name: Wheel Builds Nightly
on:
  pull_request:
    branches:
      - pre-release
      - pre-release-*
    types:
      - closed

jobs:
  build_wheels:
    if: github.repository == 'harui2019/qurry' || contains(github.event.pull_request.title, ':publish')
    name: Build wheels on ${{ matrix.os }} - ${{ matrix.archs }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - vers: Linux
            os: ubuntu-latest
            archs: X64
          - vers: MacOS
            os: macos-13
            archs: X64
          - vers: Windows
            os: windows-latest
            archs: X64
          # - vers: Windows
          #   os: windows-latest
          #   archs: ARM64
          - vers: MacOS
            os: macos-latest
            archs: ARM64
          # - vers: Linux
          #   os: ubuntu-latest
          #   archs: aarch64

    steps:
      - uses: actions/checkout@v3
        with:
          token: ${{ secrets.CI_TOKEN }}
          submodules: true
      - uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Update Pip
        run: |
          pip install --upgrade pipenv wheel pip
          pip install setuptools_rust setuptools toml
          pip install .

      - name: Reversion
        run: python get_version.py --release nightly

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Build wheels on Linux of x86 series
        if: runner.os == 'Linux' && matrix.archs == 'X64'
        uses: pypa/cibuildwheel@v2.19.2

      - name: Build wheels on MacOS of x86 series
        if: runner.os == 'macOS' && matrix.archs == 'X64'
        uses: pypa/cibuildwheel@v2.19.2
        env:
          CIBW_ARCHS_MACOS: x86_64
          CIBW_ENVIRONMENT: >-
            PYO3_CROSS_LIB_DIR="/Library/Frameworks/Python.framewormak/Versions/$(python -c 'import sys; print(str(sys.version_info[0])+"."+str(sys.version_info[1]))')/lib/python$(python -c 'import sys; print(str(sys.version_info[0])+"."+str(sys.version_info[1]))')"

      - name: Build wheels on Windows of x86 series
        if: runner.os == 'Windows' && matrix.archs == 'X64'
        uses: pypa/cibuildwheel@v2.19.2

      - name: Build wheels on MacOS of ARM series
        if: runner.os == 'macOS' && matrix.archs == 'ARM64'
        uses: pypa/cibuildwheel@v2.19.2
        env:
          CIBW_BEFORE_ALL: rustup target add aarch64-apple-darwin
          CIBW_ARCHS_MACOS: arm64 universal2
          CIBW_TEST_SKIP: "*_universal2:arm64"
          CIBW_ENVIRONMENT: >-
            CARGO_BUILD_TARGET="aarch64-apple-darwin"
            PYO3_CROSS_LIB_DIR="/Library/Frameworks/Python.framework/Versions/$(python -c 'import sys; print(str(sys.version_info[0])+"."+str(sys.version_info[1]))')/lib/python$(python -c 'import sys; print(str(sys.version_info[0])+"."+str(sys.version_info[1]))')"

      - name: Wheelhouse Upload x86
        if: matrix.archs == 'X64'
        uses: actions/upload-artifact@v3
        with:
          path: ./wheelhouse/*.whl
          name: shared-wheel-builds-x86

      - name: Wheelhouse Upload arm
        if: matrix.archs == 'ARM64'
        uses: actions/upload-artifact@v3
        with:
          path: ./wheelhouse/*.whl
          name: shared-wheel-builds-arm

  publish-to-testpypi:
    if: github.repository == 'harui2019/qurry' || contains(github.event.pull_request.title, ':publish')
    name: Publish Python üêç distribution üì¶ to TestPyPI ${{ matrix.archs }}
    runs-on: ubuntu-latest
    needs:
      - build_wheels
    strategy:
      fail-fast: false
      matrix:
        include:
          - archs: X64
            folder: shared-wheel-builds-x86
          - archs: ARM64
            folder: shared-wheel-builds-arm
    permissions:
      id-token: write # IMPORTANT: mandatory for trusted publishing

    steps:
      - name: Download all the dists ${{ matrix.archs }}
        uses: actions/download-artifact@v3
        with:
          name: ${{ matrix.folder }}
          path: deploy
      - name: Publish distribution üì¶ to TestPyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          packages-dir: deploy
          repository-url: https://test.pypi.org/legacy/
