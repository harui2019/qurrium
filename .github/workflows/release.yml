name: Release
on:
  pull_request:
    branches:
      - pre-release
      - pre-release-*
      - main
      - main-*
    types:
      - closed
env:
  CARGO_TERM_COLOR: always

permissions:
  contents: write

jobs:
  create_tag:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: true
          token: ${{ secrets.CI_TOKEN }}
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: "3.12"

      - name: Import GPG key
        uses: crazy-max/ghaction-import-gpg@v6
        with:
          gpg_private_key: ${{ secrets.GPG_PRIVATE_KEY }}
          passphrase: ${{ secrets.PASSPHRASE }}
          git_user_signingkey: true
          git_commit_gpgsign: true

      - name: Set up Git user
        run: |
          git config --global user.name ${{ github.repository_owner }}_action_bot
          git config --global user.email ${{ github.repository_owner }}@users.noreply.github.com

      - name: Bump Version and Create Tag
        id: create_tag
        run: |
          python -m pip install pep440
          if [[ "${{ github.event.pull_request.base.ref }}" == pre-release* ]] ; then
            echo "| Pre-release branch: ${{github.event.pull_request.base.ref}}"
            if [[ "${{ github.event.pull_request.title }}" == patch:* ]] ; then
              python ./tools/set_version.py -b patch -r nightly
            elif [[ "${{ github.event.pull_request.title }}" == minor:* ]] ; then
              python ./tools/set_version.py -b minor -r nightly
            elif [[ "${{ github.event.pull_request.title }}" == skip-version:* ]] ; then
              python ./tools/set_version.py -b skip -r nightly
            else 
              python ./tools/set_version.py -b dev -r nightly
            fi
          elif [[ "${{ github.event.pull_request.base.ref }}" == stable* ]] ; then
            echo "| Stable branch: ${{ github.event.pull_request.base.ref }}"
            python ./tools/set_version.py -r stable
          else
            echo "| Invalid branch: ${{ github.event.pull_request.base.ref }}"
            echo "| Exiting..."
            exit 1
          fi

      - name: Push Version Change
        if: (!contains(github.event.pull_request.title, 'skip-version:'))
        env:
          GITHUB_TOKEN: ${{ secrets.CI_TOKEN }}
        run: |
          git add qurry/VERSION.txt
          git commit -m "chore(version): update version to ${{ steps.create_tag.outputs.VERSION }}"
          git push origin

      - name: Check out Version
        run: |
          echo "| Version: ${{ steps.create_tag.outputs.VERSION }} in action"
          echo "| Tag exists: ${{ steps.create_tag.outputs.exists }}"

      - name: Create Version Tag
        if: (!contains(github.event.pull_request.title, 'skip-version:'))
        run: |
          if ${{ steps.create_tag.outputs.exists }} ; then
            echo "| Tag exists, skipped add"
          else 
            echo "| Tag doesn't exist, adding tag"
            git tag -a ${{ steps.create_tag.outputs.VERSION }} -m "chore(version): update version to ${{ steps.create_tag.outputs.VERSION }}"
            git push origin ${{ steps.create_tag.outputs.VERSION }}
          fi

      - name: Get custom tarball name
        id: get_tarball_name
        run: echo "TARBALL_NAME=qurecipe-${{ github.ref_name }}" >> $GITHUB_OUTPUT

      - name: Get archived folder name for custom tarball
        id: get_archived_folder_name
        run: echo "ARCHIVED_FOLDER=${{ github.repository_owner }}-qurecipe-$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT

      - name: Create custom tarball artifact
        run: |
          mkdir -p artifacts
          tar czhvf ${{ steps.get_tarball_name.outputs.TARBALL_NAME }}-${{ env.VERSION }}.tar.gz \
            --exclude="*metarepo-cpe-tag*" \
            --directory=../ \
            qurry/crates/ qurry/tests/ qurry/qurry/ \
            qurry/pyproject.toml qurry/setup.py qurry/requirements.txt \
            qurry/Cargo.toml qurry/Cargo.lock qurry/MANIFEST.in \
            qurry/.gitignore qurry/.gitmodules qurry/README.md \
            --transform s/qurry/${{ steps.get_archived_folder_name.outputs.ARCHIVED_FOLDER }}/

      - name: Set release variables
        id: set_release_vars
        run: |
          if [[ "${{ github.event.pull_request.base.ref }}" == stable* ]]; then
            echo "release_name=${{ steps.create_tag.outputs.VERSION }} stable" >> $GITHUB_OUTPUT
            echo "release_body=STABLE_DRAFT" >> $GITHUB_OUTPUT
            echo "prerelease=false" >> $GITHUB_OUTPUT
          else
            echo "release_name=${{ steps.create_tag.outputs.VERSION }} nightly" >> $GITHUB_OUTPUT
            echo "release_body=NIGHTLY_DRAFT" >> $GITHUB_OUTPUT
            echo "prerelease=true" >> $GITHUB_OUTPUT
          fi

      - name: Create Draft Release
        id: create_release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.create_tag.outputs.VERSION }}
          name: ${{steps.set_release_vars.outputs.release_name}}
          body: |
            ${{steps.set_release_vars.outputs.release_body}}
          prerelease: ${{steps.set_release_vars.outputs.prerelease}}
          draft: true
          generate_release_notes: true
          files: |
            ${{ steps.get_tarball_name.outputs.TARBALL_NAME }}-${{ steps.create_tag.outputs.VERSION }}.tar.gz
