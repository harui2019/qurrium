---
name: Wheel Builds
on:
  push:
    branches:
      - main
      - main-*
    tags:
      - "*.[0-9]+.[0-9]"

jobs:
  build_wheels:
    if: github.repository == 'harui2019/qurry'
    name: Build wheels on ${{matrix.vers}} by ${{ matrix.os }}/${{ matrix.archs }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - vers: linux-x86_64
            os: ubuntu-latest
            archs: X64
          - vers: macOS-x86_64 # Avaliability confirmed by act
            os: macos-13
            archs: X64
          # - vers: Windows-x86 # Avaliability confirmed by act, but failed in self-hosted runner, WTF
          #   os: windows-latest # They are using the same machine with self-hosted
          #   archs: X64
          # - vers: Windows-arm64
          #   os: windows-latest
          #   archs: ARM64
          # - vers: macOS-ARM64 # Avaliability confirmed by act
          #   os: macos-latest
          #   archs: ARM64
          # - vers: linux-aarch64 # Avaliability confirmed by act
          #   os: macos-latest
          #   archs: ARM64

    environment:
      name: pypi
      url: https://pypi.org/p/qurrium

    steps:
      - uses: actions/checkout@v3
        with:
          token: ${{ secrets.CI_TOKEN }}
          submodules: true

      - name: Set up Python
        uses: actions/setup-python@v5
        if: runner.os != 'Windows'
        with:
          python-version: "3.12"

      # - name: Set up Python for Windows
      #   uses: actions/setup-python@v3
      #   if: runner.os == 'Windows'
      #   with:
      #     python-version: "3.9"

      - name: Install Rust
        if: runner.os != 'Windows'
        uses: dtolnay/rust-toolchain@stable

      - name: Install Required Python Packages
        run: |
          python -m pip install --upgrade pip pipenv wheel
          python -m pip install --upgrade auditwheel auditwheel-symbols
          python -m pip install --upgrade setuptools_rust Cython setuptools toml wheel cibuildwheel

      - name: Reversion Nightly
        run: python get_version.py --release stable

      - name: Build wheels on Linux of x86 series
        if: runner.os == 'Linux' && matrix.archs == 'X64'
        run: python -m cibuildwheel --output-dir wheelhouse

      - name: Build wheels on MacOS of x86 series
        if: runner.os == 'macOS' && matrix.archs == 'X64'
        run: |
          echo "| Change setup.py for MacOS x86_64"
          mv -f ./setup.py ./setup-abi3.py
          mv -f ./setup-no-abi3.py ./setup.py
          echo "| Build wheels on MacOS x86_64"
          python -m cibuildwheel --output-dir wheelhouse --platform macos --archs x86_64
        env:
          CIBW_ARCHS_MACOS: x86_64

      - name: Build wheels on Windows of x86 series
        if: runner.os == 'Windows' && matrix.archs == 'X64'
        run: python -m cibuildwheel --output-dir wheelhouse
      # Attention: Windows runner requires Rust already installed
      # For there is not reliable way to install Rust on Windows runner
      # See: https://github.com/harui2019/qurry/issues/173

      - name: Build wheels on Linux of Arm series by Apple Silicon
        if: runner.os == 'macOS' && matrix.archs == 'ARM64' && matrix.vers == 'linux-aarch64'
        run: python -m cibuildwheel --output-dir wheelhouse --platform linux --archs aarch64

      - name: Build wheels on MacOS of ARM series
        if: runner.os == 'macOS' && matrix.archs == 'ARM64' && matrix.vers == 'macOS-ARM64'
        run: python -m cibuildwheel --output-dir wheelhouse --platform macos --archs arm64
        env:
          CIBW_BEFORE_ALL: rustup target add aarch64-apple-darwin
          # CIBW_ARCHS_MACOS: arm64 universal2
          # See: https://github.com/harui2019/qurry/issues/187 and https://github.com/harui2019/qurry/issues/173
          CIBW_ARCHS_MACOS: arm64
          CIBW_ENVIRONMENT: >-
            CARGO_BUILD_TARGET="aarch64-apple-darwin"
            PYO3_CROSS_LIB_DIR="/Library/Frameworks/Python.framework/Versions/$(python -c 'import sys; print(str(sys.version_info[0])+"."+str(sys.version_info[1]))')/lib/python$(python -c 'import sys; print(str(sys.version_info[0])+"."+str(sys.version_info[1]))')"

      - name: Wheelhouse Upload
        if: runner.os != 'Linux' || matrix.archs != 'X64'
        uses: actions/upload-artifact@v3
        with:
          path: ./wheelhouse/*.whl
          name: shared-wheel-builds

      - name: Early Publish distribution üì¶ to PyPI for Linux X86_64
        if: runner.os == 'Linux' && matrix.archs == 'X64'
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          packages-dir: wheelhouse
          repository-url: https://test.pypi.org/legacy/

  publish-to-pypi:
    if: github.repository == 'harui2019/qurry'
    name: Publish Python üêç distribution üì¶ to PyPI ${{ matrix.archs }}
    runs-on: ubuntu-latest
    needs:
      - build_wheels
    strategy:
      fail-fast: false
    permissions:
      id-token: write # IMPORTANT: mandatory for trusted publishing

    environment:
      name: pypi
      url: https://pypi.org/p/qurrium

    steps:
      - name: Download all the dists ${{ matrix.archs }}
        uses: actions/download-artifact@v3
        with:
          name: shared-wheel-builds
          path: deploy
      - name: Publish distribution üì¶ to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          packages-dir: deploy
